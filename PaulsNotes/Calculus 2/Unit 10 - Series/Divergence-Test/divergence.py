from manim import *

class DivergenceTest(Scene):
    def construct(self):
        
        title = Tex("The Divergence Test")
        test = MathTex(r"\text{If} \lim_{n\to\infty} a_{n} \neq 0 \text{ then} \sum a_{n} \text{will diverge}")
        example1 = MathTex(r"\sum_{n=1}^{\infty}\frac{1}{n}").shift(LEFT*2)
        example1Answer = MathTex(r" = 0").next_to(example1, DOWN)
        example1Diverge = MathTex(r"\text{Diverges}").next_to(example1, UP)
        example2 = MathTex(r"\sum_{n=1}^{\infty}\frac{1}{n^{2}}").shift(RIGHT*2)
        example2Answer = MathTex(r" = 0").next_to(example2, DOWN)
        example2Converge = MathTex(r"\text{Converges}").next_to(example2, UP)
        example3 = MathTex(r"\sum_{n = 0}^{\infty}\frac{4n^{2}-n^{3}}{10 + 2n^{3}}")
        example3Limit = MathTex(r"\lim_{n\to\infty}\sum_{n = 0}^{\infty}\frac{4n^{2}-n^{3}}{10 + 2n^{3}}")
        example3LimitSimplified = MathTex(r"\lim_{n\to\infty}\sum_{n = 0}^{\infty}\frac{-n^{3}}{2n^{3}}")
        example3Answer = MathTex(r"= -\frac{1}{2}").shift(DOWN*1.5)
        example3Final = MathTex(r"\sum_{n = 0}^{\infty}\frac{4n^{2}-n^{3}}{10 + 2n^{3}}")
        example3cord = MathTex(r" -\frac{1}{2} \neq 0 \text{ it diverges}").shift(DOWN*1.5)

        self.play(Write(title))
        self.wait(2)
        self.play(ReplacementTransform(title, test))
        self.wait(2)
        self.play(test.animate.to_edge(UP,buff=0.5))
        self.wait(2)
        self.play(Write(example3))
        self.wait(2)
        self.play(ReplacementTransform(example3, example3Limit))
        self.wait(2)
        self.play(example3Limit.animate.shift(UP*1.5))
        self.wait(2)
        self.play(Write(example3LimitSimplified))
        self.wait(2)
        self.play(Write(example3Answer))
        self.wait(2)
        self.play(FadeOut(Group(example3Answer, example3LimitSimplified, example3Limit)))
        self.play(Write(example3Final))
        self.wait(2)
        self.play(Write(example3cord))
        self.wait(2)
        self.play(FadeOut(Group(example3cord, example3Final)))
        self.wait(2)
        self.play(Write(example1),Write(example2))
        self.wait(2)
        self.play(Write(example1Answer),Write(example2Answer))
        self.wait(2)
        self.play(Write(example1Diverge),Write(example2Converge))
        self.wait(2)
        self.play(FadeOut(Group(example1,example1Answer,example1Diverge,example2,example2Answer,example2Converge,test)))
        self.wait(2)